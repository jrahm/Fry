package main

infixr >> 50

template until(expr: Expression, stmt: Statement) -> Statement
    switch(stmt)
        case Statement as s
        end
    end
end

data Maybe of B
    struct Just
        value: B
    end

    struct Nil
    end
end

struct Other of A B C D
    func: A -> B -> C -> D
end

struct List of A
    head: A
    tail: Maybe( List(A) )
end

fn [M: Monad] seq(a: M(A), b: M(B))
    bind(a, lam _. b)
end

fn main()
    println()

    until(x > 3, x = x + 2)

    fn nother()
        println()
        println()
        println()
    end

    nother() >> nother() >> nother() >> nother()

end
