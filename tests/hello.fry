package main

infixr >> 50 seq
infixl << 50 seq
infixr -> 10 Arrow
infixl <- 10 Rev

fn Vec(x: Int, a: Type) -> Type
    if x == 1
        a
    else
        Pair(a, Vec(x - 1, a))
    end
end

struct Person
      age: Int
    , hairColor: String
end

fn main(argv: List(String))

end

fn [M: Monad, A: Any, B: Any] \
    bind(a:   M(A), \
         fun: M(A) -> (A -> M(B)) -> M(B))

end


fn main(test: T -> G, \
        testa: A -> B)

    println()

    fn nother(q: List)
        println(4, 2 + 3 * 4)
        println()
        println("this is a literal")
    end

    nother() >> nother() << nother()

    [ fn _(n: A) -> Q
        println(n)
      end ]

end

fn collatz(n: Int) -> Int
    if n == 1
        0
    else
        if n % 2 = 0 ;
            collatz(n / 2)
        else
            collatz(1 + n * 3)
        end
    end
end
